# -*- coding: utf-8 -*-
"""Alerts using MACD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oYw94vkK8fyeeI5z8GvIHWZdadn2TnFa
"""

#1hr bp with 4 cross

import ccxt
import pandas as pd
import requests
from ta.momentum import RSIIndicator
from ta.trend import MACD
from datetime import datetime
from zoneinfo import ZoneInfo  # Python 3.9+

# ====== CONFIGURATION ======
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1360281611035218172/5lpdPZYq81fCotoK3CMMiJPvF2uyQqYGvdMMuoXS0EAiF1DFp-l_IGJGwRgc-yDcbonp'  # Replace with your webhook
OPTIONAL_PAIRS = ['BTC-USDT-SWAP', 'ETH-USDT-SWAP', 'SOL-USDT-SWAP', 'XRP-USDT-SWAP', 'DOGE-USDT-SWAP', 'SUI-USDT-SWAP', 'BNB-USDT-SWAP', 'ADA-USDT-SWAP', 'AVAX-USDT-SWAP', 'OM-USDT-SWAP', 'LTC-USDT-SWAP', 'PEPE-USDT-SWAP', 'TRUMP-USDT-SWAP', 'ALCH-USDT-SWAP', 'BCH-USDT-SWAP', 'LINK-USDT-SWAP', 'TON-USDT-SWAP', 'TRX-USDT-SWAP', 'FARTCOIN-USDT-SWAP', 'AAVE-USDT-SWAP', 'CRV-USDT-SWAP', 'FIL-USDT-SWAP', 'DOT-USDT-SWAP', 'APT-USDT-SWAP', 'ONDO-USDT-SWAP', 'EOS-USDT-SWAP', 'SHIB-USDT-SWAP', 'LAYER-USDT-SWAP', 'ETC-USDT-SWAP', 'ORDI-USDT-SWAP', 'IP-USDT-SWAP', 'UNI-USDT-SWAP', 'PROMPT-USDT-SWAP', 'PNUT-USDT-SWAP', 'WLD-USDT-SWAP', 'OP-USDT-SWAP', 'NEAR-USDT-SWAP', 'HBAR-USDT-SWAP', 'MOVE-USDT-SWAP', 'PI-USDT-SWAP', 'XLM-USDT-SWAP', 'WIF-USDT-SWAP', 'HYPE-USDT-SWAP', 'LDO-USDT-SWAP', 'BABY-USDT-SWAP', 'VINE-USDT-SWAP', 'ZKJ-USDT-SWAP', 'AUCTION-USDT-SWAP', 'TIA-USDT-SWAP', 'SATS-USDT-SWAP', 'ATOM-USDT-SWAP', 'UXLINK-USDT-SWAP', 'ARB-USDT-SWAP', 'BERA-USDT-SWAP', 'PEOPLE-USDT-SWAP', 'BIGTIME-USDT-SWAP', 'KAITO-USDT-SWAP', 'CORE-USDT-SWAP', 'MKR-USDT-SWAP','ZRO-USDT-SWAP','GAS-USDT-SWAP','POPCAT-USDT-SWAP','CFX-USDT-SWAP','JUP-USDT-SWAP','AI16Z-USDT-SWAP','PARTI-USDT-SWAP','POL-USDT-SWAP','ACT-USDT-SWAP','S-USDT-SWAP','X-USDT-SWAP','DYDX-USDT-SWAP','TRB-USDT-SWAP','RENDER-USDT-SWAP','BONK-USDT-SWAP','XTZ-USDT-SWAP','NEO-USDT-SWAP','AIXBT-USDT-SWAP','MASK-USDT-SWAP','INJ-USDT-SWAP','STX-USDT-SWAP','ALGO-USDT-SWAP','GUN-USDT-SWAP','CRO-USDT-SWAP','LUNC-USDT-SWAP','ATH-USDT-SWAP','LPT-USDT-SWAP','MEW-USDT-SWAP','GALA-USDT-SWAP','ETHFI-USDT-SWAP','SONIC-USDT-SWAP','AXS-USDT-SWAP','TAO-USDT-SWAP','PENGU-USDT-SWAP','GRASS-USDT-SWAP','SAND-USDT-SWAP','API3-USDT-SWAP','ICP-USDT-SWAP','ENS-USDT-SWAP','JTO-USDT-SWAP','COMP-USDT-SWAP','NOT-USDT-SWAP','FLOKI-USDT-SWAP','NEIROETH-USDT-SWAP','W-USDT-SWAP','ACH-USDT-SWAP','BLUR-USDT-SWAP','IMX-USDT-SWAP','SHELL-USDT-SWAP','MANA-USDT-SWAP','STRK-USDT-SWAP','PYTH-USDT-SWAP','AR-USDT-SWAP','VIRTUAL-USDT-SWAP','NEIRO-USDT-SWAP','SUSHI-USDT-SWAP','RSR-USDT-SWAP','JELLYJELLY-USDT-SWAP','APE-USDT-SWAP','DOGS-USDT-SWAP','ZEREBRO-USDT-SWAP','OL-USDT-SWAP','YGG-USDT-SWAP','MOODENG-USDT-SWAP','CHZ-USDT-SWAP','RAY-USDT-SWAP','BSV-USDT-SWAP','EIGEN-USDT-SWAP','LOOKS-USDT-SWAP','GOAT-USDT-SWAP','YFI-USDT-SWAP','CATI-USDT-SWAP','XAUT-USDT-SWAP','ARC-USDT-SWAP','BOME-USDT-SWAP','AGLD-USDT-SWAP','ME-USDT-SWAP','ZETA-USDT-SWAP','TURBO-USDT-SWAP','ANIME-USDT-SWAP','J-USDT-SWAP','SSV-USDT-SWAP','ZRX-USDT-SWAP','HMSTR-USDT-SWAP','MERL-USDT-SWAP','SWARMS-USDT-SWAP','VANA-USDT-SWAP','MEMEFI-USDT-SWAP','MORPHO-USDT-SWAP','MEME-USDT-SWAP','DUCK-USDT-SWAP','GRT-USDT-SWAP','AEVO-USDT-SWAP','BR-USDT-SWAP','QTUM-USDT-SWAP','THETA-USDT-SWAP','GMT-USDT-SWAP','SNX-USDT-SWAP','STORJ-USDT-SWAP','FLOW-USDT-SWAP','ARKM-USDT-SWAP','GMX-USDT-SWAP','XCH-USDT-SWAP','CETUS-USDT-SWAP','NC-USDT-SWAP','USTC-USDT-SWAP','CVC-USDT-SWAP','ETHW-USDT-SWAP','VELO-USDT-SWAP','IOTA-USDT-SWAP','GRIFFAIN-USDT-SWAP','UMA-USDT-SWAP','ONT-USDT-SWAP','EGLD-USDT-SWAP','IOST-USDT-SWAP','GPS-USDT-SWAP','MAGIC-USDT-SWAP','METIS-USDT-SWAP','1INCH-USDT-SWAP','CVX-USDT-SWAP','GLM-USDT-SWAP','ULTI-USDT-SWAP','BADGER-USDT-SWAP','CAT-USDT-SWAP','CTC-USDT-SWAP','AIDOGE-USDT-SWAP','DGB-USDT-SWAP','ZIL-USDT-SWAP','BUZZ-USDT-SWAP','CELO-USDT-SWAP','BIO-USDT-SWAP','BAT-USDT-SWAP','MAJOR-USDT-SWAP','DEGEN-USDT-SWAP','ID-USDT-SWAP','JST-USDT-SWAP','KSM-USDT-SWAP','WOO-USDT-SWAP','MINA-USDT-SWAP','KNC-USDT-SWAP','LRC-USDT-SWAP','CSPR-USDT-SWAP','RDNT-USDT-SWAP','TNSR-USDT-SWAP','BAL-USDT-SWAP','RON-USDT-SWAP','PRCL-USDT-SWAP','SWEAT-USDT-SWAP','VRA-USDT-SWAP','LQTY-USDT-SWAP','PERP-USDT-SWAP','RVN-USDT-SWAP','PIPPIN-USDT-SWAP','ONE-USDT-SWAP','ORBS-USDT-SWAP','MOVR-USDT-SWAP','SWELL-USDT-SWAP','SCR-USDT-SWAP','FOXY-USDT-SWAP','T-USDT-SWAP','COOKIE-USDT-SWAP','FXS-USDT-SWAP','BICO-USDT-SWAP','AVAAI-USDT-SWAP','FLM-USDT-SWAP','SLP-USDT-SWAP','BAND-USDT-SWAP','NMR-USDT-SWAP','ACE-USDT-SWAP','JOE-USDT-SWAP','BRETT-USDT-SWAP','PUFFER-USDT-SWAP','NFT-USDT-SWAP','DOG-USDT-SWAP','BNT-USDT-SWAP','ZENT-USDT-SWAP','SLERF-USDT-SWAP','ICX-USDT-SWAP','ALPHA-USDT-SWAP','SUNDOG-USDT-SWAP','GODS-USDT-SWAP','WAXP-USDT-SWAP','LSK-USDT-SWAP','SOLV-USDT-SWAP','LUNA-USDT-SWAP','ZK-USDT-SWAP','ENJ-USDT-SWAP',
]  # Add more as needed

RSI_PERIOD = 30
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9

RSI_OVERSOLD_LOW = 30
RSI_OVERSOLD_HIGH = 38

TIMEFRAME_RSI = '15m'
TIMEFRAME_MACD = '5m'
CANDLE_LIMIT = 150

exchange = ccxt.okx()


# ====== HELPER FUNCTIONS ======

def fetch_candles(symbol, timeframe, limit):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"[ERROR] {symbol} {timeframe} fetch failed: {e}")
        return None


def add_indicators(df):
    df['rsi'] = RSIIndicator(close=df['close'], window=RSI_PERIOD).rsi()
    macd = MACD(close=df['close'], window_fast=MACD_FAST, window_slow=MACD_SLOW, window_sign=MACD_SIGNAL)
    df['macd_line'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    return df


def is_rsi_oversold(value):
    return RSI_OVERSOLD_LOW <= value <= RSI_OVERSOLD_HIGH


def detect_bullish_macd_divergence(df):
    crosses = []
    macd_line = df['macd_line']
    macd_signal = df['macd_signal']

    for i in range(1, len(df)):
        if pd.isna(macd_line.iloc[i]) or pd.isna(macd_signal.iloc[i]):
            continue
        prev_line = macd_line.iloc[i - 1]
        prev_signal = macd_signal.iloc[i - 1]
        curr_line = macd_line.iloc[i]
        curr_signal = macd_signal.iloc[i]

        if (prev_line < prev_signal and curr_line > curr_signal) or (prev_line > prev_signal and curr_line < curr_signal):
            crosses.append((df.index[i], curr_line, df['low'].iloc[i]))

    if len(crosses) < 4:
        return False

    last_four = crosses[-4:]
    _, macd1, price1 = last_four[0]
    _, macd2, price2 = last_four[1]
    _, macd3, price3 = last_four[2]
    _, macd4, price4 = last_four[3]

    return price4 < price1 and macd4 > macd1


def send_discord_alert(symbol):
    now = datetime.now(ZoneInfo("Asia/Manila")).strftime('%Y-%m-%d %H:%M %Z')
    message = f"""üöÄ **1HR BP Right Hand Alert**

**Symbol**: {symbol}
**Time**: {now}

**Conditions Met**:
- 15m RSI(30) between 30‚Äì38 ‚úÖ
- 5m Price: Lower Low üîª
- 5m MACD Line: Higher Low ‚¨ÜÔ∏è
==============================="""
    payload = {"content": message}
    response = requests.post(DISCORD_WEBHOOK_URL, json=payload)
    if response.status_code in [200, 204]:
        print(f"[ALERT SENT] {symbol} at {now}")
    else:
        print(f"[ERROR] Failed to send alert for {symbol}: {response.status_code}")


# ====== MAIN CHECK ======

def check_symbol(symbol):
    print(f"Checking {symbol}...")

    # 15m RSI check
    df_rsi = fetch_candles(symbol, TIMEFRAME_RSI, CANDLE_LIMIT)
    if df_rsi is None:
        return
    df_rsi = add_indicators(df_rsi)
    if df_rsi['rsi'].dropna().empty:
        return
    latest_rsi = df_rsi['rsi'].dropna().iloc[-1]

    if not is_rsi_oversold(latest_rsi):
        print(f"[{symbol}] 15m RSI not in range: {latest_rsi:.2f}")
        return

    # 5m MACD divergence check
    df_macd = fetch_candles(symbol, TIMEFRAME_MACD, CANDLE_LIMIT)
    if df_macd is None:
        return
    df_macd = add_indicators(df_macd)

    if detect_bullish_macd_divergence(df_macd):
        send_discord_alert(symbol)
    else:
        print(f"[{symbol}] No bullish MACD divergence on 5m.")


def main():
    for symbol in OPTIONAL_PAIRS:
        check_symbol(symbol)


if __name__ == "__main__":
    main()

#4HR BP with 4 macd cross

import ccxt
import pandas as pd
import requests
from ta.momentum import RSIIndicator
from ta.trend import MACD
from datetime import datetime
from zoneinfo import ZoneInfo  # Python 3.9+

# ========== CONFIG ==========
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1360566113225674790/eF49QfBo96Etb8FqqXY5vOKnmU8TpFcym1OGqrvIZmfGVAUxxaDTCaRX-CIod7VpHwP4'  # Replace with your webhook
SYMBOLS = ['BTC-USDT-SWAP', 'ETH-USDT-SWAP', 'SOL-USDT-SWAP', 'XRP-USDT-SWAP', 'DOGE-USDT-SWAP', 'SUI-USDT-SWAP', 'BNB-USDT-SWAP', 'ADA-USDT-SWAP', 'AVAX-USDT-SWAP', 'OM-USDT-SWAP', 'LTC-USDT-SWAP', 'PEPE-USDT-SWAP', 'TRUMP-USDT-SWAP', 'ALCH-USDT-SWAP', 'BCH-USDT-SWAP', 'LINK-USDT-SWAP', 'TON-USDT-SWAP', 'TRX-USDT-SWAP', 'FARTCOIN-USDT-SWAP', 'AAVE-USDT-SWAP', 'CRV-USDT-SWAP', 'FIL-USDT-SWAP', 'DOT-USDT-SWAP', 'APT-USDT-SWAP', 'ONDO-USDT-SWAP', 'EOS-USDT-SWAP', 'SHIB-USDT-SWAP', 'LAYER-USDT-SWAP', 'ETC-USDT-SWAP', 'ORDI-USDT-SWAP', 'IP-USDT-SWAP', 'UNI-USDT-SWAP', 'PROMPT-USDT-SWAP', 'PNUT-USDT-SWAP', 'WLD-USDT-SWAP', 'OP-USDT-SWAP', 'NEAR-USDT-SWAP', 'HBAR-USDT-SWAP', 'MOVE-USDT-SWAP', 'PI-USDT-SWAP', 'XLM-USDT-SWAP', 'WIF-USDT-SWAP', 'HYPE-USDT-SWAP', 'LDO-USDT-SWAP', 'BABY-USDT-SWAP', 'VINE-USDT-SWAP', 'ZKJ-USDT-SWAP', 'AUCTION-USDT-SWAP', 'TIA-USDT-SWAP', 'SATS-USDT-SWAP', 'ATOM-USDT-SWAP', 'UXLINK-USDT-SWAP', 'ARB-USDT-SWAP', 'BERA-USDT-SWAP', 'PEOPLE-USDT-SWAP', 'BIGTIME-USDT-SWAP', 'KAITO-USDT-SWAP', 'CORE-USDT-SWAP', 'MKR-USDT-SWAP','ZRO-USDT-SWAP','GAS-USDT-SWAP','POPCAT-USDT-SWAP','CFX-USDT-SWAP','JUP-USDT-SWAP','AI16Z-USDT-SWAP','PARTI-USDT-SWAP','POL-USDT-SWAP','ACT-USDT-SWAP','S-USDT-SWAP','X-USDT-SWAP','DYDX-USDT-SWAP','TRB-USDT-SWAP','RENDER-USDT-SWAP','BONK-USDT-SWAP','XTZ-USDT-SWAP','NEO-USDT-SWAP','AIXBT-USDT-SWAP','MASK-USDT-SWAP','INJ-USDT-SWAP','STX-USDT-SWAP','ALGO-USDT-SWAP','GUN-USDT-SWAP','CRO-USDT-SWAP','LUNC-USDT-SWAP','ATH-USDT-SWAP','LPT-USDT-SWAP','MEW-USDT-SWAP','GALA-USDT-SWAP','ETHFI-USDT-SWAP','SONIC-USDT-SWAP','AXS-USDT-SWAP','TAO-USDT-SWAP','PENGU-USDT-SWAP','GRASS-USDT-SWAP','SAND-USDT-SWAP','API3-USDT-SWAP','ICP-USDT-SWAP','ENS-USDT-SWAP','JTO-USDT-SWAP','COMP-USDT-SWAP','NOT-USDT-SWAP','FLOKI-USDT-SWAP','NEIROETH-USDT-SWAP','W-USDT-SWAP','ACH-USDT-SWAP','BLUR-USDT-SWAP','IMX-USDT-SWAP','SHELL-USDT-SWAP','MANA-USDT-SWAP','STRK-USDT-SWAP','PYTH-USDT-SWAP','AR-USDT-SWAP','VIRTUAL-USDT-SWAP','NEIRO-USDT-SWAP','SUSHI-USDT-SWAP','RSR-USDT-SWAP','JELLYJELLY-USDT-SWAP','APE-USDT-SWAP','DOGS-USDT-SWAP','ZEREBRO-USDT-SWAP','OL-USDT-SWAP','YGG-USDT-SWAP','MOODENG-USDT-SWAP','CHZ-USDT-SWAP','RAY-USDT-SWAP','BSV-USDT-SWAP','EIGEN-USDT-SWAP','LOOKS-USDT-SWAP','GOAT-USDT-SWAP','YFI-USDT-SWAP','CATI-USDT-SWAP','XAUT-USDT-SWAP','ARC-USDT-SWAP','BOME-USDT-SWAP','AGLD-USDT-SWAP','ME-USDT-SWAP','ZETA-USDT-SWAP','TURBO-USDT-SWAP','ANIME-USDT-SWAP','J-USDT-SWAP','SSV-USDT-SWAP','ZRX-USDT-SWAP','HMSTR-USDT-SWAP','MERL-USDT-SWAP','SWARMS-USDT-SWAP','VANA-USDT-SWAP','MEMEFI-USDT-SWAP','MORPHO-USDT-SWAP','MEME-USDT-SWAP','DUCK-USDT-SWAP','GRT-USDT-SWAP','AEVO-USDT-SWAP','BR-USDT-SWAP','QTUM-USDT-SWAP','THETA-USDT-SWAP','GMT-USDT-SWAP','SNX-USDT-SWAP','STORJ-USDT-SWAP','FLOW-USDT-SWAP','ARKM-USDT-SWAP','GMX-USDT-SWAP','XCH-USDT-SWAP','CETUS-USDT-SWAP','NC-USDT-SWAP','USTC-USDT-SWAP','CVC-USDT-SWAP','ETHW-USDT-SWAP','VELO-USDT-SWAP','IOTA-USDT-SWAP','GRIFFAIN-USDT-SWAP','UMA-USDT-SWAP','ONT-USDT-SWAP','EGLD-USDT-SWAP','IOST-USDT-SWAP','GPS-USDT-SWAP','MAGIC-USDT-SWAP','METIS-USDT-SWAP','1INCH-USDT-SWAP','CVX-USDT-SWAP','GLM-USDT-SWAP','ULTI-USDT-SWAP','BADGER-USDT-SWAP','CAT-USDT-SWAP','CTC-USDT-SWAP','AIDOGE-USDT-SWAP','DGB-USDT-SWAP','ZIL-USDT-SWAP','BUZZ-USDT-SWAP','CELO-USDT-SWAP','BIO-USDT-SWAP','BAT-USDT-SWAP','MAJOR-USDT-SWAP','DEGEN-USDT-SWAP','ID-USDT-SWAP','JST-USDT-SWAP','KSM-USDT-SWAP','WOO-USDT-SWAP','MINA-USDT-SWAP','KNC-USDT-SWAP','LRC-USDT-SWAP','CSPR-USDT-SWAP','RDNT-USDT-SWAP','TNSR-USDT-SWAP','BAL-USDT-SWAP','RON-USDT-SWAP','PRCL-USDT-SWAP','SWEAT-USDT-SWAP','VRA-USDT-SWAP','LQTY-USDT-SWAP','PERP-USDT-SWAP','RVN-USDT-SWAP','PIPPIN-USDT-SWAP','ONE-USDT-SWAP','ORBS-USDT-SWAP','MOVR-USDT-SWAP','SWELL-USDT-SWAP','SCR-USDT-SWAP','FOXY-USDT-SWAP','T-USDT-SWAP','COOKIE-USDT-SWAP','FXS-USDT-SWAP','BICO-USDT-SWAP','AVAAI-USDT-SWAP','FLM-USDT-SWAP','SLP-USDT-SWAP','BAND-USDT-SWAP','NMR-USDT-SWAP','ACE-USDT-SWAP','JOE-USDT-SWAP','BRETT-USDT-SWAP','PUFFER-USDT-SWAP','NFT-USDT-SWAP','DOG-USDT-SWAP','BNT-USDT-SWAP','ZENT-USDT-SWAP','SLERF-USDT-SWAP','ICX-USDT-SWAP','ALPHA-USDT-SWAP','SUNDOG-USDT-SWAP','GODS-USDT-SWAP','WAXP-USDT-SWAP','LSK-USDT-SWAP','SOLV-USDT-SWAP','LUNA-USDT-SWAP','ZK-USDT-SWAP','ENJ-USDT-SWAP',
]  # Add more symbols if needed

RSI_PERIOD = 30
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9

RSI_LOWER = 30
RSI_UPPER = 40

TIMEFRAME_RSI = '1h'
TIMEFRAME_MACD = '15m'
CANDLE_LIMIT = 150

exchange = ccxt.okx()

# ========== HELPERS ==========

def fetch_ohlcv(symbol, timeframe, limit):
    try:
        data = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"[ERROR] Fetching {symbol} {timeframe}: {e}")
        return None

def add_indicators(df):
    df['rsi'] = RSIIndicator(close=df['close'], window=RSI_PERIOD).rsi()
    macd = MACD(close=df['close'], window_fast=MACD_FAST, window_slow=MACD_SLOW, window_sign=MACD_SIGNAL)
    df['macd_line'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    return df

def is_rsi_in_oversold(value):
    return RSI_LOWER <= value <= RSI_UPPER

def detect_macd_bullish_divergence(df):
    crosses = []
    macd_line = df['macd_line']
    macd_signal = df['macd_signal']
    lows = df['low']

    for i in range(1, len(df)):
        prev_macd = macd_line.iloc[i - 1]
        prev_signal = macd_signal.iloc[i - 1]
        curr_macd = macd_line.iloc[i]
        curr_signal = macd_signal.iloc[i]

        if (prev_macd < prev_signal and curr_macd > curr_signal) or (prev_macd > prev_signal and curr_macd < curr_signal):
            crosses.append((df.index[i], curr_macd, lows.iloc[i]))

    if len(crosses) < 4:
        return False

    last_four = crosses[-4:]
    _, macd1, low1 = last_four[0]
    _, macd4, low4 = last_four[3]

    return low4 < low1 and macd4 > macd1

def send_alert(symbol):
    now = datetime.now(ZoneInfo("Asia/Manila")).strftime('%Y-%m-%d %H:%M %Z')
    message = f"""üöÄ **4HR BP Right Hand Alert**

**Symbol**: {symbol}
**Time**: {now}

**Conditions Met**:
- RSI(30) on 1H between 30‚Äì38 ‚úÖ
- 15M Price: Lower Low üîª
- 15M MACD: Higher Low ‚¨ÜÔ∏è
- Last 4 MACD crosses used

==============================="""
    response = requests.post(DISCORD_WEBHOOK_URL, json={"content": message})
    if response.status_code == 204:
        print(f"[ALERT SENT] {symbol} at {now}")
    else:
        print(f"[ERROR] Failed to send alert for {symbol}: {response.status_code}")

# ========== CORE FUNCTION ==========

def check_symbol(symbol):
    print(f"Checking {symbol}...")

    df_rsi = fetch_ohlcv(symbol, TIMEFRAME_RSI, CANDLE_LIMIT)
    if df_rsi is None:
        return

    df_rsi = add_indicators(df_rsi)
    rsi_val = df_rsi['rsi'].dropna().iloc[-1]

    if not is_rsi_in_oversold(rsi_val):
        print(f"[{symbol}] 1H RSI not in range: {rsi_val:.2f}")
        return

    df_macd = fetch_ohlcv(symbol, TIMEFRAME_MACD, CANDLE_LIMIT)
    if df_macd is None:
        return

    df_macd = add_indicators(df_macd)
    if detect_macd_bullish_divergence(df_macd):
        send_alert(symbol)
    else:
        print(f"[{symbol}] No MACD bullish divergence (15M).")

# ========== RUNNER ==========

def main():
    for symbol in SYMBOLS:
        check_symbol(symbol)

if __name__ == '__main__':
    main()

#1Day BP with 4 cross long

import ccxt
import pandas as pd
import requests
from ta.momentum import RSIIndicator
from ta.trend import MACD
from datetime import datetime
from zoneinfo import ZoneInfo  # Python 3.9+

# ====== CONFIGURATION ======
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1360872596358299691/dRoxCbuydN3Mp2e8NAYh4LlINRD5nQanNvGaVTI1GMbGp7KHU-5SjR9a14RZkombsGp3'  # Replace with your Discord webhook URL
SYMBOLS = ['BTC-USDT-SWAP', 'ETH-USDT-SWAP', 'SOL-USDT-SWAP', 'XRP-USDT-SWAP', 'DOGE-USDT-SWAP', 'SUI-USDT-SWAP', 'BNB-USDT-SWAP', 'ADA-USDT-SWAP', 'AVAX-USDT-SWAP', 'OM-USDT-SWAP', 'LTC-USDT-SWAP', 'PEPE-USDT-SWAP', 'TRUMP-USDT-SWAP', 'ALCH-USDT-SWAP', 'BCH-USDT-SWAP', 'LINK-USDT-SWAP', 'TON-USDT-SWAP', 'TRX-USDT-SWAP', 'FARTCOIN-USDT-SWAP', 'AAVE-USDT-SWAP', 'CRV-USDT-SWAP', 'FIL-USDT-SWAP', 'DOT-USDT-SWAP', 'APT-USDT-SWAP', 'ONDO-USDT-SWAP', 'EOS-USDT-SWAP', 'SHIB-USDT-SWAP', 'LAYER-USDT-SWAP', 'ETC-USDT-SWAP', 'ORDI-USDT-SWAP', 'IP-USDT-SWAP', 'UNI-USDT-SWAP', 'PROMPT-USDT-SWAP', 'PNUT-USDT-SWAP', 'WLD-USDT-SWAP', 'OP-USDT-SWAP', 'NEAR-USDT-SWAP', 'HBAR-USDT-SWAP', 'MOVE-USDT-SWAP', 'PI-USDT-SWAP', 'XLM-USDT-SWAP', 'WIF-USDT-SWAP', 'HYPE-USDT-SWAP', 'LDO-USDT-SWAP', 'BABY-USDT-SWAP', 'VINE-USDT-SWAP', 'ZKJ-USDT-SWAP', 'AUCTION-USDT-SWAP', 'TIA-USDT-SWAP', 'SATS-USDT-SWAP', 'ATOM-USDT-SWAP', 'UXLINK-USDT-SWAP', 'ARB-USDT-SWAP', 'BERA-USDT-SWAP', 'PEOPLE-USDT-SWAP', 'BIGTIME-USDT-SWAP', 'KAITO-USDT-SWAP', 'CORE-USDT-SWAP', 'MKR-USDT-SWAP','ZRO-USDT-SWAP','GAS-USDT-SWAP','POPCAT-USDT-SWAP','CFX-USDT-SWAP','JUP-USDT-SWAP','AI16Z-USDT-SWAP','PARTI-USDT-SWAP','POL-USDT-SWAP','ACT-USDT-SWAP','S-USDT-SWAP','X-USDT-SWAP','DYDX-USDT-SWAP','TRB-USDT-SWAP','RENDER-USDT-SWAP','BONK-USDT-SWAP','XTZ-USDT-SWAP','NEO-USDT-SWAP','AIXBT-USDT-SWAP','MASK-USDT-SWAP','INJ-USDT-SWAP','STX-USDT-SWAP','ALGO-USDT-SWAP','GUN-USDT-SWAP','CRO-USDT-SWAP','LUNC-USDT-SWAP','ATH-USDT-SWAP','LPT-USDT-SWAP','MEW-USDT-SWAP','GALA-USDT-SWAP','ETHFI-USDT-SWAP','SONIC-USDT-SWAP','AXS-USDT-SWAP','TAO-USDT-SWAP','PENGU-USDT-SWAP','GRASS-USDT-SWAP','SAND-USDT-SWAP','API3-USDT-SWAP','ICP-USDT-SWAP','ENS-USDT-SWAP','JTO-USDT-SWAP','COMP-USDT-SWAP','NOT-USDT-SWAP','FLOKI-USDT-SWAP','NEIROETH-USDT-SWAP','W-USDT-SWAP','ACH-USDT-SWAP','BLUR-USDT-SWAP','IMX-USDT-SWAP','SHELL-USDT-SWAP','MANA-USDT-SWAP','STRK-USDT-SWAP','PYTH-USDT-SWAP','AR-USDT-SWAP','VIRTUAL-USDT-SWAP','NEIRO-USDT-SWAP','SUSHI-USDT-SWAP','RSR-USDT-SWAP','JELLYJELLY-USDT-SWAP','APE-USDT-SWAP','DOGS-USDT-SWAP','ZEREBRO-USDT-SWAP','OL-USDT-SWAP','YGG-USDT-SWAP','MOODENG-USDT-SWAP','CHZ-USDT-SWAP','RAY-USDT-SWAP','BSV-USDT-SWAP','EIGEN-USDT-SWAP','LOOKS-USDT-SWAP','GOAT-USDT-SWAP','YFI-USDT-SWAP','CATI-USDT-SWAP','XAUT-USDT-SWAP','ARC-USDT-SWAP','BOME-USDT-SWAP','AGLD-USDT-SWAP','ME-USDT-SWAP','ZETA-USDT-SWAP','TURBO-USDT-SWAP','ANIME-USDT-SWAP','J-USDT-SWAP','SSV-USDT-SWAP','ZRX-USDT-SWAP','HMSTR-USDT-SWAP','MERL-USDT-SWAP','SWARMS-USDT-SWAP','VANA-USDT-SWAP','MEMEFI-USDT-SWAP','MORPHO-USDT-SWAP','MEME-USDT-SWAP','DUCK-USDT-SWAP','GRT-USDT-SWAP','AEVO-USDT-SWAP','BR-USDT-SWAP','QTUM-USDT-SWAP','THETA-USDT-SWAP','GMT-USDT-SWAP','SNX-USDT-SWAP','STORJ-USDT-SWAP','FLOW-USDT-SWAP','ARKM-USDT-SWAP','GMX-USDT-SWAP','XCH-USDT-SWAP','CETUS-USDT-SWAP','NC-USDT-SWAP','USTC-USDT-SWAP','CVC-USDT-SWAP','ETHW-USDT-SWAP','VELO-USDT-SWAP','IOTA-USDT-SWAP','GRIFFAIN-USDT-SWAP','UMA-USDT-SWAP','ONT-USDT-SWAP','EGLD-USDT-SWAP','IOST-USDT-SWAP','GPS-USDT-SWAP','MAGIC-USDT-SWAP','METIS-USDT-SWAP','1INCH-USDT-SWAP','CVX-USDT-SWAP','GLM-USDT-SWAP','ULTI-USDT-SWAP','BADGER-USDT-SWAP','CAT-USDT-SWAP','CTC-USDT-SWAP','AIDOGE-USDT-SWAP','DGB-USDT-SWAP','ZIL-USDT-SWAP','BUZZ-USDT-SWAP','CELO-USDT-SWAP','BIO-USDT-SWAP','BAT-USDT-SWAP','MAJOR-USDT-SWAP','DEGEN-USDT-SWAP','ID-USDT-SWAP','JST-USDT-SWAP','KSM-USDT-SWAP','WOO-USDT-SWAP','MINA-USDT-SWAP','KNC-USDT-SWAP','LRC-USDT-SWAP','CSPR-USDT-SWAP','RDNT-USDT-SWAP','TNSR-USDT-SWAP','BAL-USDT-SWAP','RON-USDT-SWAP','PRCL-USDT-SWAP','SWEAT-USDT-SWAP','VRA-USDT-SWAP','LQTY-USDT-SWAP','PERP-USDT-SWAP','RVN-USDT-SWAP','PIPPIN-USDT-SWAP','ONE-USDT-SWAP','ORBS-USDT-SWAP','MOVR-USDT-SWAP','SWELL-USDT-SWAP','SCR-USDT-SWAP','FOXY-USDT-SWAP','T-USDT-SWAP','COOKIE-USDT-SWAP','FXS-USDT-SWAP','BICO-USDT-SWAP','AVAAI-USDT-SWAP','FLM-USDT-SWAP','SLP-USDT-SWAP','BAND-USDT-SWAP','NMR-USDT-SWAP','ACE-USDT-SWAP','JOE-USDT-SWAP','BRETT-USDT-SWAP','PUFFER-USDT-SWAP','NFT-USDT-SWAP','DOG-USDT-SWAP','BNT-USDT-SWAP','ZENT-USDT-SWAP','SLERF-USDT-SWAP','ICX-USDT-SWAP','ALPHA-USDT-SWAP','SUNDOG-USDT-SWAP','GODS-USDT-SWAP','WAXP-USDT-SWAP','LSK-USDT-SWAP','SOLV-USDT-SWAP','LUNA-USDT-SWAP','ZK-USDT-SWAP','ENJ-USDT-SWAP',
]  # Add your desired trading pairs

RSI_PERIOD = 30
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9

RSI_OVERSOLD_LOW = 30
RSI_OVERSOLD_HIGH = 38

TIMEFRAME_RSI = '4h'
TIMEFRAME_MACD = '1h'
CANDLE_LIMIT = 150

exchange = ccxt.okx({
    'options': {'defaultType': 'swap'}  # Ensure we're using Futures
})

# ====== HELPER FUNCTIONS ======

def fetch_candles(symbol, timeframe, limit):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        if len(ohlcv) == 0:
            print(f"[ERROR] No data received for {symbol} on {timeframe} timeframe.")
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"[ERROR] {symbol} {timeframe} fetch failed: {e}")
        return None

def add_indicators(df):
    if df.empty:
        return df
    df['rsi'] = RSIIndicator(close=df['close'], window=RSI_PERIOD).rsi()
    macd = MACD(close=df['close'], window_fast=MACD_FAST, window_slow=MACD_SLOW, window_sign=MACD_SIGNAL)
    df['macd_line'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    return df

def is_rsi_oversold(value):
    return RSI_OVERSOLD_LOW <= value <= RSI_OVERSOLD_HIGH

def detect_bullish_macd_divergence(df):
    crosses = []
    macd_line = df['macd_line']
    macd_signal = df['macd_signal']

    for i in range(1, len(df)):
        prev_line = macd_line.iloc[i - 1]
        prev_signal = macd_signal.iloc[i - 1]
        curr_line = macd_line.iloc[i]
        curr_signal = macd_signal.iloc[i]

        if (prev_line < prev_signal and curr_line > curr_signal) or (prev_line > prev_signal and curr_line < curr_signal):
            crosses.append((df.index[i], curr_line, df['low'].iloc[i]))

    if len(crosses) < 4:
        return False

    # Use last 4 crosses
    last_four = crosses[-4:]
    prices = [price for _, _, price in last_four]
    macds = [macd for _, macd, _ in last_four]

    return prices[-1] < prices[0] and macds[-1] > macds[0]

def send_discord_alert(symbol):
    now = datetime.now(ZoneInfo("Asia/Manila")).strftime('%Y-%m-%d %H:%M %Z')
    message = f"""üöÄ **1Day BP Right Hand Alert**

**Symbol**: {symbol}
**Time**: {now}

**Conditions Met**:
- 4H RSI(30) between 30‚Äì38 ‚úÖ
- 1H Price: Lower Low üîª
- 1H MACD Line: Higher Low ‚¨ÜÔ∏è
===============================
"""
    payload = {"content": message}
    response = requests.post(DISCORD_WEBHOOK_URL, json=payload)
    if response.status_code == 204:
        print(f"[ALERT SENT] {symbol} at {now}")
    else:
        print(f"[ERROR] Failed to send alert for {symbol}: {response.status_code}")

# ====== MAIN CHECK ======

def check_symbol(symbol):
    print(f"Checking {symbol}...")

    # 4H RSI check
    df_rsi = fetch_candles(symbol, TIMEFRAME_RSI, CANDLE_LIMIT)
    if df_rsi is None or df_rsi.empty:
        print(f"[ERROR] No data or empty DataFrame for {symbol} on 4H timeframe.")
        return
    df_rsi = add_indicators(df_rsi)

    if df_rsi['rsi'].isna().all():  # Check if RSI values are NaN
        print(f"[ERROR] RSI data is not available for {symbol}.")
        return

    latest_rsi = df_rsi['rsi'].dropna().iloc[-1]

    if not is_rsi_oversold(latest_rsi):
        print(f"[{symbol}] 4H RSI not in range: {latest_rsi:.2f}")
        return

    # 1H MACD divergence check
    df_macd = fetch_candles(symbol, TIMEFRAME_MACD, CANDLE_LIMIT)
    if df_macd is None or df_macd.empty:
        print(f"[ERROR] No data or empty DataFrame for {symbol} on 1H timeframe.")
        return
    df_macd = add_indicators(df_macd)

    if df_macd['macd_line'].isna().all() or df_macd['macd_signal'].isna().all():  # Check if MACD data is NaN
        print(f"[ERROR] MACD data is not available for {symbol}.")
        return

    if detect_bullish_macd_divergence(df_macd):
        send_discord_alert(symbol)
    else:
        print(f"[{symbol}] No bullish MACD divergence on 1H.")

def main():
    for symbol in SYMBOLS:
        check_symbol(symbol)

if __name__ == "__main__":
    main()

import ccxt
import pandas as pd
import requests
from ta.momentum import RSIIndicator
from ta.trend import MACD
from datetime import datetime
from zoneinfo import ZoneInfo  # Python 3.9+

# Configuration
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1360566710603612261/G0_CN54HSvPNBFx1nON9-maxUACSYzcBv59Igyjt2Heq-YnGxmQAb2gEAt2tCpOR96y8'  # Replace this with your webhook URL
SYMBOLS = ['BTC-USDT-SWAP', 'ETH-USDT-SWAP', 'SOL-USDT-SWAP', 'XRP-USDT-SWAP', 'DOGE-USDT-SWAP', 'SUI-USDT-SWAP', 'BNB-USDT-SWAP', 'ADA-USDT-SWAP', 'AVAX-USDT-SWAP', 'OM-USDT-SWAP', 'LTC-USDT-SWAP', 'PEPE-USDT-SWAP', 'TRUMP-USDT-SWAP', 'ALCH-USDT-SWAP', 'BCH-USDT-SWAP', 'LINK-USDT-SWAP', 'TON-USDT-SWAP', 'TRX-USDT-SWAP', 'FARTCOIN-USDT-SWAP', 'AAVE-USDT-SWAP', 'CRV-USDT-SWAP', 'FIL-USDT-SWAP', 'DOT-USDT-SWAP', 'APT-USDT-SWAP', 'ONDO-USDT-SWAP', 'EOS-USDT-SWAP', 'SHIB-USDT-SWAP', 'LAYER-USDT-SWAP', 'ETC-USDT-SWAP', 'ORDI-USDT-SWAP', 'IP-USDT-SWAP', 'UNI-USDT-SWAP', 'PROMPT-USDT-SWAP', 'PNUT-USDT-SWAP', 'WLD-USDT-SWAP', 'OP-USDT-SWAP', 'NEAR-USDT-SWAP', 'HBAR-USDT-SWAP', 'MOVE-USDT-SWAP', 'PI-USDT-SWAP', 'XLM-USDT-SWAP', 'WIF-USDT-SWAP', 'HYPE-USDT-SWAP', 'LDO-USDT-SWAP', 'BABY-USDT-SWAP', 'VINE-USDT-SWAP', 'ZKJ-USDT-SWAP', 'AUCTION-USDT-SWAP', 'TIA-USDT-SWAP', 'SATS-USDT-SWAP', 'ATOM-USDT-SWAP', 'UXLINK-USDT-SWAP', 'ARB-USDT-SWAP', 'BERA-USDT-SWAP', 'PEOPLE-USDT-SWAP', 'BIGTIME-USDT-SWAP', 'KAITO-USDT-SWAP', 'CORE-USDT-SWAP', 'MKR-USDT-SWAP','ZRO-USDT-SWAP','GAS-USDT-SWAP','POPCAT-USDT-SWAP','CFX-USDT-SWAP','JUP-USDT-SWAP','AI16Z-USDT-SWAP','PARTI-USDT-SWAP','POL-USDT-SWAP','ACT-USDT-SWAP','S-USDT-SWAP','X-USDT-SWAP','DYDX-USDT-SWAP','TRB-USDT-SWAP','RENDER-USDT-SWAP','BONK-USDT-SWAP','XTZ-USDT-SWAP','NEO-USDT-SWAP','AIXBT-USDT-SWAP','MASK-USDT-SWAP','INJ-USDT-SWAP','STX-USDT-SWAP','ALGO-USDT-SWAP','GUN-USDT-SWAP','CRO-USDT-SWAP','LUNC-USDT-SWAP','ATH-USDT-SWAP','LPT-USDT-SWAP','MEW-USDT-SWAP','GALA-USDT-SWAP','ETHFI-USDT-SWAP','SONIC-USDT-SWAP','AXS-USDT-SWAP','TAO-USDT-SWAP','PENGU-USDT-SWAP','GRASS-USDT-SWAP','SAND-USDT-SWAP','API3-USDT-SWAP','ICP-USDT-SWAP','ENS-USDT-SWAP','JTO-USDT-SWAP','COMP-USDT-SWAP','NOT-USDT-SWAP','FLOKI-USDT-SWAP','NEIROETH-USDT-SWAP','W-USDT-SWAP','ACH-USDT-SWAP','BLUR-USDT-SWAP','IMX-USDT-SWAP','SHELL-USDT-SWAP','MANA-USDT-SWAP','STRK-USDT-SWAP','PYTH-USDT-SWAP','AR-USDT-SWAP','VIRTUAL-USDT-SWAP','NEIRO-USDT-SWAP','SUSHI-USDT-SWAP','RSR-USDT-SWAP','JELLYJELLY-USDT-SWAP','APE-USDT-SWAP','DOGS-USDT-SWAP','ZEREBRO-USDT-SWAP','OL-USDT-SWAP','YGG-USDT-SWAP','MOODENG-USDT-SWAP','CHZ-USDT-SWAP','RAY-USDT-SWAP','BSV-USDT-SWAP','EIGEN-USDT-SWAP','LOOKS-USDT-SWAP','GOAT-USDT-SWAP','YFI-USDT-SWAP','CATI-USDT-SWAP','XAUT-USDT-SWAP','ARC-USDT-SWAP','BOME-USDT-SWAP','AGLD-USDT-SWAP','ME-USDT-SWAP','ZETA-USDT-SWAP','TURBO-USDT-SWAP','ANIME-USDT-SWAP','J-USDT-SWAP','SSV-USDT-SWAP','ZRX-USDT-SWAP','HMSTR-USDT-SWAP','MERL-USDT-SWAP','SWARMS-USDT-SWAP','VANA-USDT-SWAP','MEMEFI-USDT-SWAP','MORPHO-USDT-SWAP','MEME-USDT-SWAP','DUCK-USDT-SWAP','GRT-USDT-SWAP','AEVO-USDT-SWAP','BR-USDT-SWAP','QTUM-USDT-SWAP','THETA-USDT-SWAP','GMT-USDT-SWAP','SNX-USDT-SWAP','STORJ-USDT-SWAP','FLOW-USDT-SWAP','ARKM-USDT-SWAP','GMX-USDT-SWAP','XCH-USDT-SWAP','CETUS-USDT-SWAP','NC-USDT-SWAP','USTC-USDT-SWAP','CVC-USDT-SWAP','ETHW-USDT-SWAP','VELO-USDT-SWAP','IOTA-USDT-SWAP','GRIFFAIN-USDT-SWAP','UMA-USDT-SWAP','ONT-USDT-SWAP','EGLD-USDT-SWAP','IOST-USDT-SWAP','GPS-USDT-SWAP','MAGIC-USDT-SWAP','METIS-USDT-SWAP','1INCH-USDT-SWAP','CVX-USDT-SWAP','GLM-USDT-SWAP','ULTI-USDT-SWAP','BADGER-USDT-SWAP','CAT-USDT-SWAP','CTC-USDT-SWAP','AIDOGE-USDT-SWAP','DGB-USDT-SWAP','ZIL-USDT-SWAP','BUZZ-USDT-SWAP','CELO-USDT-SWAP','BIO-USDT-SWAP','BAT-USDT-SWAP','MAJOR-USDT-SWAP','DEGEN-USDT-SWAP','ID-USDT-SWAP','JST-USDT-SWAP','KSM-USDT-SWAP','WOO-USDT-SWAP','MINA-USDT-SWAP','KNC-USDT-SWAP','LRC-USDT-SWAP','CSPR-USDT-SWAP','RDNT-USDT-SWAP','TNSR-USDT-SWAP','BAL-USDT-SWAP','RON-USDT-SWAP','PRCL-USDT-SWAP','SWEAT-USDT-SWAP','VRA-USDT-SWAP','LQTY-USDT-SWAP','PERP-USDT-SWAP','RVN-USDT-SWAP','PIPPIN-USDT-SWAP','ONE-USDT-SWAP','ORBS-USDT-SWAP','MOVR-USDT-SWAP','SWELL-USDT-SWAP','SCR-USDT-SWAP','FOXY-USDT-SWAP','T-USDT-SWAP','COOKIE-USDT-SWAP','FXS-USDT-SWAP','BICO-USDT-SWAP','AVAAI-USDT-SWAP','FLM-USDT-SWAP','SLP-USDT-SWAP','BAND-USDT-SWAP','NMR-USDT-SWAP','ACE-USDT-SWAP','JOE-USDT-SWAP','BRETT-USDT-SWAP','PUFFER-USDT-SWAP','NFT-USDT-SWAP','DOG-USDT-SWAP','BNT-USDT-SWAP','ZENT-USDT-SWAP','SLERF-USDT-SWAP','ICX-USDT-SWAP','ALPHA-USDT-SWAP','SUNDOG-USDT-SWAP','GODS-USDT-SWAP','WAXP-USDT-SWAP','LSK-USDT-SWAP','SOLV-USDT-SWAP','LUNA-USDT-SWAP','ZK-USDT-SWAP','ENJ-USDT-SWAP',
]  # Add more trading pairs as needed

RSI_PERIOD = 30
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9

RSI_OVERBOUGHT_LOW = 60
RSI_OVERBOUGHT_HIGH = 70

TIMEFRAME_RSI = '1h'
TIMEFRAME_MACD = '15m'
CANDLE_LIMIT = 150

exchange = ccxt.okx({
    'options': {'defaultType': 'swap'}  # Using OKX Futures
})

def fetch_candles(symbol, timeframe, limit):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"[ERROR] Fetch failed for {symbol} {timeframe}: {e}")
        return None

def add_indicators(df):
    df['rsi'] = RSIIndicator(close=df['close'], window=RSI_PERIOD).rsi()
    macd = MACD(close=df['close'], window_fast=MACD_FAST, window_slow=MACD_SLOW, window_sign=MACD_SIGNAL)
    df['macd_line'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    return df

def is_rsi_overbought(value):
    return RSI_OVERBOUGHT_LOW <= value <= RSI_OVERBOUGHT_HIGH

def detect_bearish_macd_divergence(df):
    crosses = []
    macd_line = df['macd_line']
    macd_signal = df['macd_signal']

    for i in range(1, len(df)):
        prev_line = macd_line.iloc[i - 1]
        prev_signal = macd_signal.iloc[i - 1]
        curr_line = macd_line.iloc[i]
        curr_signal = macd_signal.iloc[i]

        if (prev_line < prev_signal and curr_line > curr_signal) or (prev_line > prev_signal and curr_line < curr_signal):
            crosses.append((df.index[i], curr_line, df['high'].iloc[i]))

    if len(crosses) < 5:
        return False

    last_five = crosses[-5:]
    prices = [price for _, _, price in last_five]
    macds = [macd for _, macd, _ in last_five]

    return prices[-1] > prices[0] and macds[-1] < macds[0]

def send_discord_alert(symbol):
    now = datetime.now(ZoneInfo("Asia/Manila")).strftime('%Y-%m-%d %H:%M %Z')
    message = f"""üö® **4HR BP RSI Left hand or Tatlong butlig Alert**

**Symbol**: {symbol}
**Time**: {now}

**Conditions Met**:
- 1H RSI(30) between 60‚Äì70 ‚úÖ
- 15M Price: Higher High üî∫
- 15M MACD Line: Lower High üîª
===============================
"""
    payload = {"content": message}
    response = requests.post(DISCORD_WEBHOOK_URL, json=payload)
    if response.status_code == 204:
        print(f"[ALERT SENT] {symbol} at {now}")
    else:
        print(f"[ERROR] Discord alert failed: {response.status_code}")

def check_symbol(symbol):
    print(f"Checking {symbol}...")

    df_rsi = fetch_candles(symbol, TIMEFRAME_RSI, CANDLE_LIMIT)
    if df_rsi is None or df_rsi.empty:
        return
    df_rsi = add_indicators(df_rsi)
    if df_rsi['rsi'].dropna().empty:
        return

    latest_rsi = df_rsi['rsi'].dropna().iloc[-1]
    if not is_rsi_overbought(latest_rsi):
        print(f"[{symbol}] 1H RSI not overbought: {latest_rsi:.2f}")
        return

    df_macd = fetch_candles(symbol, TIMEFRAME_MACD, CANDLE_LIMIT)
    if df_macd is None or df_macd.empty:
        return
    df_macd = add_indicators(df_macd)

    if detect_bearish_macd_divergence(df_macd):
        send_discord_alert(symbol)
    else:
        print(f"[{symbol}] No bearish MACD divergence found.")

def main():
    for symbol in SYMBOLS:
        check_symbol(symbol)

if __name__ == "__main__":
    main()